package plugins.infrastructure

import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import java.io.File

class BuildConstantsGeneratorPluginTest {

    @TempDir
    lateinit var projectDir: File

    @Test
    fun `generates build constants file with correct content`() {
        // --- 1. Setup ---
        val tomlContent = """
            [versions]
            kotlin = "2.0.0"
            spring-boot = "3.3.0"

            [libraries]
            jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind" }
            spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }

            [plugins]
            kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
            spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
            jvm-spring-convention = { id = "jvm-spring-library-convention" }
        """.trimIndent()

        val buildScriptContent = """
            configure<plugins.infrastructure.BuildConstantsGeneratorExtension> {
                packageName.set("com.example.test.constants")
                conventionPluginIds.set(listOf("jvm-spring-library-convention"))
                moduleNames.set(listOf(":app", ":core-library"))
            }
        """.trimIndent()

        // --- 2. Execution & Verification ---
        val generatedFile = runTestAndGetGeneratedFile(tomlContent, buildScriptContent)
        val expectedContent = """
            // Generated by a custom Gradle task. Do not edit.
            package com.example.test.constants

            object BuildConstants {

                const val LIBS_CATALOG = "libs"

                object Plugins {
                    const val KOTLIN_JVM = "org.jetbrains.kotlin.jvm"
                    const val SPRING_BOOT = "org.springframework.boot"

                    object ConventionPlugins {
                        const val JVM_SPRING_CONVENTION = "jvm-spring-library-convention"
                    }
                }

                object Libraries {
                    const val JACKSON_DATABIND = "jackson.databind"
                    const val SPRING_BOOT_STARTER_WEB = "spring.boot.starter.web"
                }

                object Modules {
                    const val APP = ":app"
                    const val CORE_LIBRARY = ":core-library"
                }
            }
        """.trimIndent()

        assertEquals(expectedContent.trim(), generatedFile.readText().trim())
    }

    @Test
    fun `handles empty libraries and plugins in toml`() {
        // --- 1. Setup ---
        val tomlContent = """
            [versions]
            kotlin = "2.0.0"
        """.trimIndent() // No [libraries] or [plugins] sections

        val buildScriptContent = """
            configure<plugins.infrastructure.BuildConstantsGeneratorExtension> {
                packageName.set("com.example.test.constants")
                // No convention plugins or modules configured
            }
        """.trimIndent()

        // --- 2. Execution & Verification ---
        val generatedFile = runTestAndGetGeneratedFile(tomlContent, buildScriptContent)
        val expectedContent = """
            // Generated by a custom Gradle task. Do not edit.
            package com.example.test.constants

            object BuildConstants {

                const val LIBS_CATALOG = "libs"

                object Plugins {

                    object ConventionPlugins {
                    }
                }

                object Libraries {
                }

                object Modules {
                }
            }
        """.trimIndent()

        assertEquals(expectedContent.trim(), generatedFile.readText().trim())
    }

    private fun runTestAndGetGeneratedFile(tomlContent: String, buildScriptContent: String): File {
        // Setup shared files
        val tomlFile = File(projectDir, "gradle/libs.versions.toml")
        tomlFile.parentFile.mkdirs()
        tomlFile.writeText(tomlContent)

        File(projectDir, "build.gradle.kts").writeText("""
            plugins {
                id("build-constants-generator")
                id("org.jetbrains.kotlin.jvm") version "2.0.0"
            }
            group = "com.example"
            version = "1.0.0"
            $buildScriptContent
        """.trimIndent())

        // Execute the task
        val result = GradleRunner.create()
            .withProjectDir(projectDir)
            .withArguments("generateBuildConstants", "--stacktrace")
            .withPluginClasspath()
            .build()

        assertEquals(TaskOutcome.SUCCESS, result.task(":generateBuildConstants")?.outcome)

        // Verify and return the generated file
        val generatedFile = File(projectDir, "build/generated/sources/build-constants/kotlin/com/example/test/constants/BuildConstants.kt")
        assertTrue(generatedFile.exists(), "The generated BuildConstants.kt file should exist.")
        return generatedFile
    }
}
