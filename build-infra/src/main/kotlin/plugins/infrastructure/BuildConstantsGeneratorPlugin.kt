package plugins.infrastructure

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.VersionCatalogsExtension
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.Property
import org.gradle.kotlin.dsl.create
import org.gradle.kotlin.dsl.getByType
import org.jetbrains.kotlin.gradle.dsl.KotlinProjectExtension

interface BuildConstantsGeneratorExtension {
    val packageName: Property<String>
    val conventionPluginIds: ListProperty<String>
    val moduleNames: ListProperty<String>
}

@Suppress("unused")
class BuildConstantsGeneratorPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        val extension = project.extensions.create<BuildConstantsGeneratorExtension>("buildConstants")

        val generateBuildConstantsTask = project.tasks.register("generateBuildConstants") {
            inputs.property("packageName", extension.packageName)
            inputs.property("conventionPluginIds", extension.conventionPluginIds)
            inputs.property("moduleNames", extension.moduleNames)

            val outputDir = project.layout.buildDirectory.dir("generated/sources/build-constants/kotlin")
            outputs.dir(outputDir)

            doLast {
                val catalogs = project.extensions.getByType<VersionCatalogsExtension>()
                val libsCatalog = catalogs.find("libs").get()
                val libraryAliases = libsCatalog.libraryAliases.toSet()
                val pluginAliases = libsCatalog.pluginAliases.toSet()
                val conventionPluginIds = extension.conventionPluginIds.get()
                val packageName = extension.packageName.get()
                val moduleNames = extension.moduleNames.get()

                val pluginAliasToIdMap = pluginAliases.associateWith { alias ->
                    libsCatalog.findPlugin(alias).get().get().pluginId
                }

                val outputFile = outputDir.get().file("${packageName.replace('.', '/')}/BuildConstants.kt").asFile
                outputFile.parentFile.mkdirs()
                outputFile.writeText(
                    generateConstants(
                        libraryAliases,
                        pluginAliasToIdMap,
                        conventionPluginIds,
                        packageName,
                        moduleNames
                    )
                )
            }
        }

        project.plugins.withId("org.jetbrains.kotlin.jvm") {
            project.extensions.getByType<KotlinProjectExtension>().sourceSets.named("main") {
                kotlin.srcDir(generateBuildConstantsTask)
            }
        }
    }

    private fun generateConstants(
        libraryAliases: Set<String>,
        pluginAliasToIdMap: Map<String, String>,
        conventionPluginIds: List<String>,
        packageName: String,
        moduleNames: List<String>
    ): String {
        val toConstName = { input: String ->
            input.split(Regex("[.-]")).joinToString("_") { it.uppercase() }
        }

        // Correctly partition the plugins map into two separate maps: one for convention
        // plugins and one for all other regular plugins. This fixes the filtering bug.
        val (conventionPluginAliasToIdMap, regularPluginAliasToIdMap) = pluginAliasToIdMap
            .entries
            .partition { it.value in conventionPluginIds }
            .let { (convention, regular) ->
                convention.associate { it.key to it.value } to regular.associate { it.key to it.value }
            }

        return buildString {
            appendLine("// Generated by a custom Gradle task. Do not edit.")
            appendLine("package $packageName")
            appendLine()
            appendLine("object BuildConstants {")
            appendLine()
            appendLine("    const val LIBS_CATALOG = \"libs\"")
            appendLine()
            appendLine("    object Plugins {")
            regularPluginAliasToIdMap.entries.sortedBy { it.key }.forEach { (alias, id) ->
                appendLine("        const val ${toConstName(alias)} = \"$id\"")
            }
            appendLine()
            appendLine("        object ConventionPlugins {")
            // Generate constants from the convention plugin alias for better readability and consistency.
            conventionPluginAliasToIdMap.entries.sortedBy { it.key }.forEach { (alias, id) ->
                appendLine("            const val ${toConstName(alias)} = \"$id\"")
            }
            appendLine("        }")
            appendLine("    }")
            appendLine()
            appendLine("    object Libraries {")
            libraryAliases.sorted().forEach { alias ->
                appendLine("        const val ${toConstName(alias)} = \"$alias\"")
            }
            appendLine("    }")
            appendLine()
            appendLine("    object Modules {")
            moduleNames.sorted().forEach { moduleName ->
                val constName = moduleName.removePrefix(":").replace('-', '_').uppercase()
                appendLine("        const val $constName = \"$moduleName\"")
            }
            appendLine("    }")
            appendLine("}")
        }
    }
}
